/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as Page1RouteImport } from './routes/page1'
import { Route as AppRouteRouteImport } from './routes/_app/route'
import { Route as AppNotificationsRouteImport } from './routes/_app/notifications'
import { Route as AppOwnerRepoIssuesIssueRouteImport } from './routes/_app/$owner/$repo/issues/$issue'

const Page1Route = Page1RouteImport.update({
  id: '/page1',
  path: '/page1',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppNotificationsRoute = AppNotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppOwnerRepoIssuesIssueRoute = AppOwnerRepoIssuesIssueRouteImport.update({
  id: '/$owner/$repo/issues/$issue',
  path: '/$owner/$repo/issues/$issue',
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/page1': typeof Page1Route
  '/notifications': typeof AppNotificationsRoute
  '/$owner/$repo/issues/$issue': typeof AppOwnerRepoIssuesIssueRoute
}
export interface FileRoutesByTo {
  '/page1': typeof Page1Route
  '/notifications': typeof AppNotificationsRoute
  '/$owner/$repo/issues/$issue': typeof AppOwnerRepoIssuesIssueRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteRouteWithChildren
  '/page1': typeof Page1Route
  '/_app/notifications': typeof AppNotificationsRoute
  '/_app/$owner/$repo/issues/$issue': typeof AppOwnerRepoIssuesIssueRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/page1' | '/notifications' | '/$owner/$repo/issues/$issue'
  fileRoutesByTo: FileRoutesByTo
  to: '/page1' | '/notifications' | '/$owner/$repo/issues/$issue'
  id:
    | '__root__'
    | '/_app'
    | '/page1'
    | '/_app/notifications'
    | '/_app/$owner/$repo/issues/$issue'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
  Page1Route: typeof Page1Route
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/page1': {
      id: '/page1'
      path: '/page1'
      fullPath: '/page1'
      preLoaderRoute: typeof Page1RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/notifications': {
      id: '/_app/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof AppNotificationsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/$owner/$repo/issues/$issue': {
      id: '/_app/$owner/$repo/issues/$issue'
      path: '/$owner/$repo/issues/$issue'
      fullPath: '/$owner/$repo/issues/$issue'
      preLoaderRoute: typeof AppOwnerRepoIssuesIssueRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppNotificationsRoute: typeof AppNotificationsRoute
  AppOwnerRepoIssuesIssueRoute: typeof AppOwnerRepoIssuesIssueRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppNotificationsRoute: AppNotificationsRoute,
  AppOwnerRepoIssuesIssueRoute: AppOwnerRepoIssuesIssueRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
  Page1Route: Page1Route,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
